# -*- coding: utf-8 -*-
"""rock.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q-2v53UoGBKHM2uN--hLNgHqsxEGaaV1
"""

!pip install transformers torch gradio accelerate bitsandbytes PyPDF2 python-docx -q

import torch
from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline
import gradio as gr
import PyPDF2
from docx import Document
import warnings
warnings.filterwarnings("ignore")

class ClauseWiseLegalAnalyzer:
    def __init__(self):
        self.model_name = "ibm-granite/granite-3.2-2b-instruct"
        self.tokenizer = None
        self.model = None
        self.pipeline = None
        self.load_model()

    def load_model(self):
        print("Loading Granite 3.2-2B model...")

        self.tokenizer = AutoTokenizer.from_pretrained(
            self.model_name,
            trust_remote_code=True
        )

        if self.tokenizer.pad_token is None:
            self.tokenizer.pad_token = self.tokenizer.eos_token

        self.model = AutoModelForCausalLM.from_pretrained(
            self.model_name,
            torch_dtype=torch.float16,
            device_map="auto",
            trust_remote_code=True,
            load_in_8bit=True
        )

        self.pipeline = pipeline(
            "text-generation",
            model=self.model,
            tokenizer=self.tokenizer,
            torch_dtype=torch.float16,
            device_map="auto"
        )

        print("Model loaded successfully!")

    def generate_analysis(self, prompt, max_length=500):
        try:
            formatted_prompt = f"<|user|>\nAs a legal AI assistant, {prompt}\n<|assistant|>\n"

            response = self.pipeline(
                formatted_prompt,
                max_new_tokens=max_length,
                temperature=0.3,
                top_p=0.9,
                repetition_penalty=1.2,
                do_sample=True,
                pad_token_id=self.tokenizer.eos_token_id,
                return_full_text=False
            )

            return response[0]['generated_text'].strip()
        except Exception as e:
            return f"Error: {str(e)}"

    def extract_text_from_file(self, file):
        if file is None:
            return "No file uploaded"

        try:
            if file.name.endswith('.pdf'):
                reader = PyPDF2.PdfReader(file)
                text = ""
                for page in reader.pages:
                    text += page.extract_text() + "\n"
                return text

            elif file.name.endswith('.docx'):
                doc = Document(file)
                text = ""
                for paragraph in doc.paragraphs:
                    text += paragraph.text + "\n"
                return text

            elif file.name.endswith('.txt'):
                return file.read().decode('utf-8')

            else:
                return "Unsupported file format"
        except Exception as e:
            return f"Error reading file: {str(e)}"

    def analyze_clauses(self, document_text):
        prompt = f"""Analyze this legal document and identify key clauses:
1. List each clause type found
2. Summarize each clause
3. Rate risk level (Low/Medium/High)

Document: {document_text[:2500]}"""
        return self.generate_analysis(prompt, 600)

    def risk_assessment(self, document_text):
        prompt = f"""Perform risk assessment:
1. Identify high-risk clauses
2. Note missing important clauses
3. Rate overall risk (1-10)
4. Provide recommendations

Document: {document_text[:2500]}"""
        return self.generate_analysis(prompt, 600)

    def compliance_check(self, document_text):
        prompt = f"""Check compliance issues:
1. Missing standard provisions
2. Regulatory compliance concerns
3. Language clarity issues
4. Recommendations

Document: {document_text[:2500]}"""
        return self.generate_analysis(prompt, 600)

    def generate_summary(self, document_text):
        prompt = f"""Create executive summary:
1. Document type and purpose
2. Key parties
3. Main terms
4. Important dates
5. Critical provisions

Document: {document_text[:2500]}"""
        return self.generate_analysis(prompt, 400)

    def check_fake_certificate(self, document_text):
        prompt = f"""Analyze this certificate for authenticity markers:
1. Check for standard certificate elements (issuing authority, date, seal references)
2. Verify format consistency and professional structure
3. Look for suspicious language or formatting
4. Check for required legal elements
5. Rate authenticity likelihood (Genuine/Suspicious/Likely Fake)
6. List red flags found

Certificate: {document_text[:2500]}"""
        return self.generate_analysis(prompt, 700)

    def check_fake_land_document(self, document_text):
        prompt = f"""Analyze this land document for authenticity:
1. Check for essential land document elements (survey numbers, boundaries, registration details)
2. Verify proper legal descriptions and measurements
3. Look for government stamp/registration references
4. Check for proper witness signatures mentions
5. Identify missing crucial information
6. Rate document legitimacy (Authentic/Questionable/Likely Forged)
7. List authenticity concerns

Land Document: {document_text[:2500]}"""
        return self.generate_analysis(prompt, 700)

    def check_fake_pdf_document(self, document_text, filename=""):
        prompt = f"""Analyze this PDF document for signs of manipulation or forgery:
1. Check document structure and consistency
2. Look for formatting irregularities
3. Analyze text quality and font consistency
4. Check for copy-paste indicators
5. Verify logical flow and professional presentation
6. Rate PDF authenticity (Original/Modified/Suspicious)
7. List technical red flags

Filename: {filename}
Document: {document_text[:2500]}"""
        return self.generate_analysis(prompt, 700)

    def check_fake_document_general(self, document_text):
        prompt = f"""Perform comprehensive document authenticity analysis:
1. Check overall document structure and professionalism
2. Verify language consistency and grammar
3. Look for template misuse or copy-paste indicators
4. Check for proper legal/official formatting
5. Identify suspicious elements or inconsistencies
6. Verify completeness of required information
7. Rate overall authenticity (Genuine/Suspicious/Likely Fake)
8. Provide detailed fraud indicators

Document: {document_text[:2500]}"""
        return self.generate_analysis(prompt, 800)

# Initialize analyzer
analyzer = ClauseWiseLegalAnalyzer()

# Create Gradio interface
def create_interface():
    with gr.Blocks(title="ClauseWise Legal Analyzer") as demo:
        gr.Markdown("# ‚öñÔ∏è ClauseWise: Legal Document Analyzer + Fraud Detection")
        gr.Markdown("Upload legal documents for analysis and authenticity verification")

        # File upload
        file_input = gr.File(
            label="Upload Document (PDF, DOCX, TXT)",
            file_types=['.pdf', '.docx', '.txt']
        )

        # Document text
        document_text = gr.Textbox(
            label="Document Text",
            placeholder="Upload file or paste text here...",
            lines=6
        )

        # Process file upload
        file_input.change(
            analyzer.extract_text_from_file,
            inputs=file_input,
            outputs=document_text
        )

        # Analysis tabs
        with gr.Tabs():
            with gr.Tab("Clause Analysis"):
                clause_btn = gr.Button("Analyze Clauses", variant="primary")
                clause_output = gr.Textbox(label="Results", lines=10)
                clause_btn.click(analyzer.analyze_clauses, document_text, clause_output)

            with gr.Tab("Risk Assessment"):
                risk_btn = gr.Button("Assess Risk", variant="primary")
                risk_output = gr.Textbox(label="Results", lines=10)
                risk_btn.click(analyzer.risk_assessment, document_text, risk_output)

            with gr.Tab("Compliance Check"):
                compliance_btn = gr.Button("Check Compliance", variant="primary")
                compliance_output = gr.Textbox(label="Results", lines=10)
                compliance_btn.click(analyzer.compliance_check, document_text, compliance_output)

            with gr.Tab("Executive Summary"):
                summary_btn = gr.Button("Generate Summary", variant="primary")
                summary_output = gr.Textbox(label="Results", lines=8)
                summary_btn.click(analyzer.generate_summary, document_text, summary_output)

            with gr.Tab("üéì Fake Certificate Checker"):
                cert_btn = gr.Button("Check Certificate Authenticity", variant="primary")
                cert_output = gr.Textbox(label="Certificate Analysis Results", lines=12)
                cert_btn.click(analyzer.check_fake_certificate, document_text, cert_output)

            with gr.Tab("üèòÔ∏è Fake Land Document Checker"):
                land_btn = gr.Button("Check Land Document Authenticity", variant="primary")
                land_output = gr.Textbox(label="Land Document Analysis Results", lines=12)
                land_btn.click(analyzer.check_fake_land_document, document_text, land_output)

            with gr.Tab("üìÑ Fake PDF Checker"):
                pdf_btn = gr.Button("Check PDF Authenticity", variant="primary")
                pdf_output = gr.Textbox(label="PDF Analysis Results", lines=12)

                def check_pdf_with_filename(text):
                    filename = file_input.value.name if file_input.value else ""
                    return analyzer.check_fake_pdf_document(text, filename)

                pdf_btn.click(check_pdf_with_filename, document_text, pdf_output)

            with gr.Tab("üîç General Document Fraud Detector"):
                fraud_btn = gr.Button("Check Document Authenticity", variant="primary")
                fraud_output = gr.Textbox(label="Document Fraud Analysis Results", lines=12)
                fraud_btn.click(analyzer.check_fake_document_general, document_text, fraud_output)

    return demo

# Launch application
demo = create_interface()
demo.launch(share=True)